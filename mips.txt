.data
	temp_v0: .space 4008
	SIZE_c0: .word 1000
	arr_v0: .space 4008
	qpow_MOD_c0: .word 10089
	s2: .asciiz ".\n"
	s4: .asciiz " "
	s5: .asciiz "a < b and b < c are equal.\n"
	s3: .asciiz "The answer of quick_pow is: "
	s7: .asciiz "\n"
	s0: .asciiz "20373649\n"
	s1: .asciiz "The hash of the sorted array is "
	s8: .asciiz "After a complex calculation: d = "
	s6: .asciiz "The num I input is: "

.text
jal main
li $v0, 10
syscall

main:
# param begin from 188:
	addi $sp, $sp, -192
b39:
	la $a0, s0
	li $v0, 4
	syscall
	li $s7, 0
################################1:
	li $t0, 1
	beq $t0, $zero, b42
b40:
	li $v0, 5
	syscall
	move $s4, $v0
	li $s0, 0
################################2:
	xori $t0, $s4, 0
	beq $t0, $zero, b45
b43:
	li $v0, 5
	syscall
	move $t0, $v0
	move $v0, $s0
	sll $v0, $v0, 2
	sw $t0, arr_v0($v0)
	addi $s0, $s0, 1
b44:
	xor $t0, $s0, $s4
	bne $t0, $zero, b43
b45:
	sw $ra, -4($sp)
	sw $s4, -16($sp)
	la $v0, arr_v0
	sw $v0, -12($sp)
	li $v0, 0
	sw $v0, -8($sp)
	sw $s7, 0($sp)
	sw $s4, 4($sp)
	jal divide_and_conquer_sort
	addi $sp, $sp, 240
	lw $ra, -4($sp)
	lw $s7, 0($sp)
	lw $s4, 4($sp)
	sw $ra, -4($sp)
	sw $s4, -12($sp)
	la $v0, arr_v0
	sw $v0, -8($sp)
	jal hash
	addi $sp, $sp, 56
	lw $ra, -4($sp)
	lw $s7, 0($sp)
	move $t0, $v0
	la $a0, s1
	li $v0, 4
	syscall
	move $a0, $t0
	li $v0, 1
	syscall
	la $a0, s2
	li $v0, 4
	syscall
	addi $s7, $s7, 1
b41:
	xori $t0, $s7, 5
	bne $t0, $zero, b40
b42:
	sw $ra, -4($sp)
	li $v0, 34
	sw $v0, -16($sp)
	li $v0, 89
	sw $v0, -12($sp)
	li $v0, 10089
	sw $v0, -8($sp)
	jal quick_pow
	addi $sp, $sp, 64
	lw $ra, -4($sp)
	move $t0, $v0
	sw $t0, 12($sp)
	sw $ra, -4($sp)
	li $v0, 59
	sw $v0, -16($sp)
	li $v0, 122
	sw $v0, -12($sp)
	li $v0, 10089
	sw $v0, -8($sp)
	jal quick_pow
	addi $sp, $sp, 64
	lw $ra, -4($sp)
	move $t0, $v0
	sw $t0, 16($sp)
	sw $ra, -4($sp)
	li $v0, 13
	sw $v0, -16($sp)
	li $v0, 3444
	sw $v0, -12($sp)
	li $v0, 10089
	sw $v0, -8($sp)
	jal quick_pow
	addi $sp, $sp, 64
	lw $ra, -4($sp)
	move $t0, $v0
	sw $t0, 20($sp)
	sw $ra, -4($sp)
	li $v0, 11
	sw $v0, -16($sp)
	li $v0, 987
	sw $v0, -12($sp)
	li $v0, 10089
	sw $v0, -8($sp)
	jal quick_pow
	addi $sp, $sp, 64
	lw $ra, -4($sp)
	move $t0, $v0
	sw $t0, 24($sp)
	lw $t1, 12($sp)
	lw $t2, 16($sp)
	lw $t3, 20($sp)
	lw $t4, 24($sp)
	la $a0, s3
	li $v0, 4
	syscall
	move $a0, $t1
	li $v0, 1
	syscall
	la $a0, s4
	li $v0, 4
	syscall
	move $a0, $t2
	li $v0, 1
	syscall
	la $a0, s4
	li $v0, 4
	syscall
	move $a0, $t3
	li $v0, 1
	syscall
	la $a0, s4
	li $v0, 4
	syscall
	move $a0, $t4
	li $v0, 1
	syscall
	la $a0, s2
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	move $s7, $v0
	li $v0, 5
	syscall
	move $s4, $v0
	li $v0, 5
	syscall
	move $s0, $v0
	slt $t5, $s7, $s4
	slt $t6, $s4, $s0
	xor $t7, $t5, $t6
	sltiu $t7, $t7, 1
	beq $t7, $zero, b47
b46:
	la $a0, s5
	li $v0, 4
	syscall
b47:
	li $v0, 5
	syscall
	move $s0, $v0
	sll $s0, $s0, 15
	sra $t0, $s0, 3
	sra $t1, $t0, 4
	sra $t2, $t1, 8
	la $a0, s6
	li $v0, 4
	syscall
	move $a0, $t2
	li $v0, 1
	syscall
	la $a0, s7
	li $v0, 4
	syscall
	mul $t3, $s0, 12
	li $v0, -1840700269
	mult $t3, $v0
	mfhi $v0
	addu $v0, $t3, $v0
	sra $v0, $v0, 2
	slt $a0, $t3, $zero
	addu $v0, $v0, $a0
	xori $v0, $v0, 0
	addi $t4, $v0, 0
	mul $t5, $t4, 23
	addi $t6, $t5, -2188
	li $v0, -1431655765
	mult $t6, $v0
	mfhi $v0
	addu $v0, $t6, $v0
	sra $v0, $v0, 2
	slt $a0, $t6, $zero
	addu $v0, $v0, $a0
	xori $v0, $v0, 0
	addi $v0, $v0, 0
	mul $v0, $v0, 6
	subu $t7, $t6, $v0
	mul $t8, $t7, 999
	addi $s0, $t8, -1222
	la $a0, s8
	li $v0, 4
	syscall
	move $a0, $s0
	li $v0, 1
	syscall
	la $a0, s7
	li $v0, 4
	syscall
	li $v0, 0
	jr $ra

divide_and_conquer_sort:
# param begin from 224:
	addi $sp, $sp, -240
	lw $s6, 228($sp)
	lw $s2, 224($sp)
	lw $s0, 8($sp)
	lw $s5, 4($sp)
	lw $s4, 232($sp)
b0:
	xori $t0, $s2, 1
	sltiu $t0, $t0, 1
	beq $t0, $zero, b2
b1:
	jr $ra
	j b3
b2:
	xori $t0, $s2, 2
	sltiu $t0, $t0, 1
	beq $t0, $zero, b5
b4:
	move $v0, $s4
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	lw $t0, 0($v0)
	addi $t1, $s4, 1
	move $v0, $t1
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	lw $t2, 0($v0)
	sgt $t3, $t0, $t2
	beq $t3, $zero, b8
b7:
	move $v0, $s4
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	lw $s0, 0($v0)
	addi $t0, $s4, 1
	move $v0, $t0
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	lw $t1, 0($v0)
	move $v0, $s4
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	sw $t1, 0($v0)
	addi $t2, $s4, 1
	move $v0, $t2
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	sw $s0, 0($v0)
b8:
	j b6
	addi $t0, $s5, -1
	addi $t1, $s0, -1
	addi $t2, $s5, -1
	addi $t3, $s0, -1
b5:
	sra $s5, $s2, 1
	subu $s0, $s2, $s5
	sw $ra, -4($sp)
	sw $s5, -16($sp)
	sw $s6, -12($sp)
	sw $s4, -8($sp)
	sw $t0, 88($sp)
	sw $t1, 96($sp)
	sw $t2, 104($sp)
	sw $t3, 128($sp)
	sw $s0, 8($sp)
	sw $s5, 4($sp)
	jal divide_and_conquer_sort
	addi $sp, $sp, 240
	lw $ra, -4($sp)
	lw $s6, 228($sp)
	lw $s2, 224($sp)
	lw $s0, 8($sp)
	lw $s5, 4($sp)
	lw $s4, 232($sp)
	addu $t0, $s4, $s5
	sw $ra, -4($sp)
	sw $s0, -16($sp)
	sw $s6, -12($sp)
	sw $t0, -8($sp)
	jal divide_and_conquer_sort
	addi $sp, $sp, 240
	lw $ra, -4($sp)
	lw $s6, 228($sp)
	lw $s2, 224($sp)
	lw $s5, 4($sp)
	lw $s4, 232($sp)
	li $s0, 0
	li $s7, 0
	li $s3, 0
	addu $s1, $s4, $s5
b9:
	lw $t0, 88($sp)
	xor $t1, $s7, $t0
	sltiu $t1, $t1, 1
	beq $t1, $zero, b13
b12:
	lw $t0, 96($sp)
	xor $t1, $s3, $t0
	sltiu $t1, $t1, 1
	beq $t1, $zero, b15
b14:
	j b11
b16:
b15:
b13:
	lw $t0, 104($sp)
	xor $t1, $s7, $t0
	sltiu $t1, $t1, 1
	beq $t1, $zero, b18
b17:
	addu $t0, $s1, $s3
	move $v0, $t0
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	lw $t1, 0($v0)
	move $v0, $s0
	sll $v0, $v0, 2
	sw $t1, temp_v0($v0)
	addi $s0, $s0, 1
	addi $s3, $s3, 1
	j b19
b18:
	lw $t0, 128($sp)
	xor $t1, $s3, $t0
	sltiu $t1, $t1, 1
	beq $t1, $zero, b21
b20:
	addu $t0, $s4, $s7
	move $v0, $t0
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	lw $t1, 0($v0)
	move $v0, $s0
	sll $v0, $v0, 2
	sw $t1, temp_v0($v0)
	addi $s0, $s0, 1
	addi $s7, $s7, 1
	j b22
b21:
	addu $t0, $s4, $s7
	move $v0, $t0
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	lw $t1, 0($v0)
	addu $t2, $s1, $s3
	move $v0, $t2
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	lw $t3, 0($v0)
	slt $t4, $t1, $t3
	beq $t4, $zero, b24
b23:
	addu $t0, $s4, $s7
	move $v0, $t0
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	lw $t1, 0($v0)
	move $v0, $s0
	sll $v0, $v0, 2
	sw $t1, temp_v0($v0)
	addi $s0, $s0, 1
	addi $s7, $s7, 1
	j b25
b24:
	addu $t0, $s1, $s3
	move $v0, $t0
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	lw $t1, 0($v0)
	move $v0, $s0
	sll $v0, $v0, 2
	sw $t1, temp_v0($v0)
	addi $s0, $s0, 1
	addi $s3, $s3, 1
b25:
b22:
b19:
b10:
	j b9
b11:
	li $s0, 0
	xori $t0, $s2, 0
	beq $t0, $zero, b28
b26:
	move $v0, $s0
	sll $v0, $v0, 2
	lw $t0, temp_v0($v0)
	addu $t1, $s4, $s0
	move $v0, $t1
	sll $v0, $v0, 2
	addu $v0, $v0, $s6
	sw $t0, 0($v0)
	addi $s0, $s0, 1
b27:
	xor $t0, $s0, $s2
	bne $t0, $zero, b26
b28:
b6:
b3:
	jr $ra

quick_pow:
# param begin from 48:
	addi $sp, $sp, -64
	lw $s5, 48($sp)
	lw $s7, 56($sp)
	lw $s4, 52($sp)
b29:
	move $s0, $s4
	move $s4, $s5
	li $s5, 1
	xori $t0, $s0, 0
	beq $t0, $zero, b32
b30:
	andi $t0, $s0, 1
	xori $t1, $t0, 1
	sltiu $t1, $t1, 1
	beq $t1, $zero, b34
b33:
	mul $t0, $s5, $s4
	div $t0, $s7
	mfhi $s5
b34:
	mul $t0, $s4, $s4
	div $t0, $s7
	mfhi $s4
	sra $s0, $s0, 1
b31:
	xori $t0, $s0, 0
	bne $t0, $zero, b30
b32:
	move $v0, $s5
	jr $ra

hash:
# param begin from 44:
	addi $sp, $sp, -56
	lw $s5, 48($sp)
	lw $s0, 44($sp)
b35:
	li $s7, 0
	li $s4, 0
	xori $t0, $s0, 0
	beq $t0, $zero, b38
b36:
	mul $t0, $s7, 53
	move $v0, $s4
	sll $v0, $v0, 2
	addu $v0, $v0, $s5
	lw $t1, 0($v0)
	addu $t2, $t0, $t1
	li $v0, -692077866
	mult $t2, $v0
	mfhi $v0
	addu $v0, $t2, $v0
	sra $v0, $v0, 23
	slt $a0, $t2, $zero
	addu $v0, $v0, $a0
	xori $v0, $v0, 0
	addi $v0, $v0, 0
	mul $v0, $v0, 9999973
	subu $s7, $t2, $v0
	addi $s4, $s4, 1
b37:
	xor $t0, $s4, $s0
	bne $t0, $zero, b36
b38:
	move $v0, $s7
	jr $ra

